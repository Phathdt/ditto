name: build and push image
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
    branches:
      - 'release/v[0-9]+.[0-9]+.[0-9]+*'
      - 'refs/tags/v[0-9]+.[0-9]+.[0-9]+*'

  workflow_dispatch:
    inputs:
      hubAddressGroupObject:
        type: choice
        description: 'Deploy service ðŸš€ðŸš€ðŸš€'
        required: true
        default: 'deploy'
        options:
          - 'deploy'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
    branches:
      - 'release/v[0-9]+.[0-9]+.[0-9]+*'
      - 'refs/tags/v[0-9]+.[0-9]+.[0-9]+*'

env:
  IMAGE_TAG_LATEST: latest

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Pre-check step and set env prod from release
        if: startsWith(github.ref, 'refs/tags/v')
        id: get_current_env_prod
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+.*$ ]] && [[ ${{ github.event.base_ref }} =~ ^refs/heads/master ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> "$GITHUB_ENV"
            echo "[INFO] PASSED pre-check. Using build automatically production from release"
            exit 0
          fi

      - name: Login Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx

      - name: Build, tag, and push image to Dockerhub
        if: startsWith(github.ref, 'refs/tags/v')
        id: build-image
        timeout-minutes: 15 #####
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-9)
          DOCKER_REPOSITORY=${{ secrets.DOCKERHUB_USERNAME }}/ditto
          docker build -t ${DOCKER_REPOSITORY}:${{ env.VERSION }} -f ./Dockerfile .
          docker tag ${DOCKER_REPOSITORY}:${{ env.VERSION }} ${DOCKER_REPOSITORY}:${IMAGE_TAG_LATEST}
          docker push ${DOCKER_REPOSITORY}:${{ env.VERSION }}
          docker push ${DOCKER_REPOSITORY}:${IMAGE_TAG_LATEST}
